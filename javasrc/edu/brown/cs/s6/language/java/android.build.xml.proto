<?xml version="1.0" encoding="UTF-8"?>
<project name="$(PROJECTNAME)" default="$(ANTRUN)" >

    <property name="sdk.dir" value='/home/spr/Android/android-sdk-linux' />
    <property name="target" value='android-23' />

    <import file="${sdk.dir}/tools/ant/build.xml" />

    <!-- compilation options -->
    <property name="ant.build.javac.source" value="1.7" />
    <property name="ant.build.javac.target" value="1.7" />
    <property name="java.encoding" value="UTF-8" />
    <property name="java.target" value="1.7" />
    <property name="java.source" value="1.7" />
    <property name="java.compilerargs" value="" />
    <property name="java.compiler.classpath" value="" />
    <echo message="Ant running on Java version ${ant.java.version}" />

    <!-- Input directories -->
    <property name="source.dir" value="src" />
    <property name="source.absolute.dir" location="${source.dir}" />
    <property name="gen.absolute.dir" location="gen" />
    <property name="resource.absolute.dir" location="res" />
    <property name="asset.dir" value="assets" />
    <property name="asset.absolute.dir" location="${asset.dir}" />
    <property name="jar.libs.dir" value="libs" />
    <property name="jar.libs.absolute.dir" location="${jar.libs.dir}" />
    <property name="native.libs.absolute.dir" location="libs" />
    <property name="manifest.file" value="AndroidManifest.xml" />
    <property name="manifest.abs.file" location="${manifest.file}" />
    <!-- Output directories -->
    <property name="out.dir" value="bin" />
    <property name="out.absolute.dir" location="${out.dir}" />
    <property name="out.classes.absolute.dir" location="${out.dir}/classes" />
    <property name="out.res.absolute.dir" location="${out.dir}/res" />
    <property name="out.rs.obj.absolute.dir" location="${out.dir}/rsObj" />
    <property name="out.rs.libs.absolute.dir" location="${out.dir}/rsLibs" />
    <property name="out.aidl.absolute.dir" location="${out.dir}/aidl" />
    <property name="out.dexed.absolute.dir" location="${out.dir}/dexedLibs" />
    <property name="out.manifest.abs.file" location="${out.dir}/AndroidManifest.xml" />
    <!-- tools location -->
    <property name="android.tools.dir" location="${sdk.dir}/tools" />
    <property name="android.platform.tools.dir" location="${sdk.dir}/platform-tools" />
    <property name="adb" location="${android.platform.tools.dir}/adb${exe}" />

<path id='s6.classpath'>
   <pathelement location="$(BIN)" />
   <pathelement location="$(JUNITCP)" />
   <pathelement location="$(S6CLS)" />
   <pathelement location="$(IVY)" />
   <pathelement location="$(S6CTX)" />
</path>



    <!-- ******************************************************* -->
    <!-- ******************** Build Targets ******************** -->
    <!-- ******************************************************* -->
    <!-- Basic Ant + SDK check -->
    <target name="-check-env">
	<checkenv />
    </target>
    <!-- target to disable building dependencies -->
    <target name="nodeps">
	<property name="dont.do.deps" value="true" />
    </target>
    <!-- generic setup -->
    <target name="-setup" depends="-check-env">
	<echo level="info">Project Name: ${ant.project.name}</echo>
	<gettype projectTypeOut="project.type" />
	<!-- sets a few boolean based on project.type
	 to make the if task easier -->
	<condition property="project.is.library" value="true" else="false">
	    <equals arg1="${project.type}" arg2="library" />
	</condition>
	<condition property="project.is.test" value="true" else="false">
	    <equals arg1="${project.type}" arg2="test" />
	</condition>
	<condition property="project.is.testapp" value="true" else="false">
	    <equals arg1="${project.type}" arg2="test-app" />
	</condition>
	<!-- If a test project, resolve absolute path to tested project. -->
	<if condition="${project.is.test}">
	    <then>
		<property name="tested.project.absolute.dir" location="${tested.project.dir}" />
	    </then>
	</if>
	<!-- get the project manifest package -->
	<xpath input="${manifest.abs.file}" expression="/manifest/@package" output="project.app.package" />
    </target>
    <!-- empty default pre-clean target. Create a similar target in
     your build.xml and it'll be called instead of this one. -->
    <target name="-pre-clean" />
    <!-- clean target -->
    <target name="clean" depends="-setup, -pre-clean" description="Removes output files created by other targets.">
	<delete dir="${out.absolute.dir}" verbose="${verbose}" />
	<delete dir="${gen.absolute.dir}" verbose="${verbose}" />
	<!-- if we know about a tested project or libraries, we clean them too. -->
	<if condition="${project.is.test}">
	    <then>
		<property name="tested.project.absolute.dir" location="${tested.project.dir}" />
		<subant failonerror="true">
		    <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />
		    <target name="clean" />
		</subant>
	    </then>
	</if>
	<!-- get all the libraries -->
	<if>
	    <condition>
		<not>
		    <isset property="dont.do.deps" />
		</not>
	    </condition>
	    <then>
		<getlibpath libraryFolderPathOut="project.library.folder.path" />
		<if>
		    <condition>
			<isreference refid="project.library.folder.path" />
		    </condition>
		    <then>
			<!-- clean the libraries with nodeps since we already
			 know about all the libraries even the indirect one -->
			<subant buildpathref="project.library.folder.path" antfile="build.xml" failonerror="true">
			    <target name="nodeps" />
			    <target name="clean" />
			</subant>
		    </then>
		</if>
	    </then>
	</if>
    </target>
    <!-- Pre build setup -->
    <target name="-build-setup" depends="-setup">
	<!-- find location of build tools -->
	<getbuildtools name="android.build.tools.dir" verbose="${verbose}" />
	<property name="aidl" location="${android.build.tools.dir}/aidl${exe}" />
	<property name="aapt" location="${android.build.tools.dir}/aapt${exe}" />
	<property name="dx" location="${android.build.tools.dir}/dx${bat}" />
	<property name="zipalign" location="${android.build.tools.dir}/zipalign${exe}" />
	<!-- read the previous build mode -->
	<property file="${out.build.prop.file}" />
	<!-- if empty the props won't be set, meaning it's a new build.
	 To force a build, set the prop to empty values. -->
	<property name="build.last.target" value="" />
	<property name="build.last.is.instrumented" value="" />
	<property name="build.last.is.packaging.debug" value="" />
	<property name="build.last.is.signing.debug" value="" />
	<!-- If the "debug" build type changed, clear out the compiled code.
	 This is to make sure the new BuildConfig.DEBUG value is picked up
	 as javac can't deal with this type of change in its dependency computation. -->
	<if>
	    <condition>
		<and>
		    <length string="${build.last.is.packaging.debug}" trim="true" when="greater" length="0" />
		    <not>
			<equals arg1="${build.is.packaging.debug}" arg2="${build.last.is.packaging.debug}" />
		    </not>
		</and>
	    </condition>
	    <then>
		<echo level="info">Switching between debug and non debug build: Deleting previous compilation output...</echo>
		<delete dir="${out.classes.absolute.dir}" verbose="${verbose}" />
	    </then>
	    <else>
		<!-- Else, we may still need to clean the code, for another reason.
		 special case for instrumented: if the previous build was
		 instrumented but not this one, clear out the compiled code -->
		<if>
		    <condition>
			<and>
			    <istrue value="${build.last.is.instrumented}" />
			    <isfalse value="${build.is.instrumented}" />
			</and>
		    </condition>
		    <then>
			<echo level="info">Switching from instrumented to non-instrumented build: Deleting previous compilation output...</echo>
			<delete dir="${out.classes.absolute.dir}" verbose="${verbose}" />
		    </then>
		</if>
	    </else>
	</if>
	<echo level="info">Resolving Build Target for ${ant.project.name}...</echo>
	<!-- load project properties, resolve Android target, library dependencies
	 and set some properties with the results.
	 All property names are passed as parameters ending in -Out -->
	<gettarget androidJarFileOut="project.target.android.jar" androidAidlFileOut="project.target.framework.aidl" bootClassPathOut="project.target.class.path" targetApiOut="project.target.apilevel" minSdkVersionOut="project.minSdkVersion" />
	<!-- Value of the hasCode attribute (Application node) extracted from manifest file -->
	<xpath input="${manifest.abs.file}" expression="/manifest/application/@android:hasCode" output="manifest.hasCode" default="true" />
	<echo level="info">----------</echo>
	<echo level="info">Creating output directories if needed...</echo>
	<mkdir dir="${resource.absolute.dir}" />
	<mkdir dir="${jar.libs.absolute.dir}" />
	<mkdir dir="${out.absolute.dir}" />
	<mkdir dir="${out.res.absolute.dir}" />
	<mkdir dir="${out.rs.obj.absolute.dir}" />
	<mkdir dir="${out.rs.libs.absolute.dir}" />
	<do-only-if-manifest-hasCode>
	    <mkdir dir="${gen.absolute.dir}" />
	    <mkdir dir="${out.classes.absolute.dir}" />
	    <mkdir dir="${out.dexed.absolute.dir}" />
	</do-only-if-manifest-hasCode>
	<echo level="info">----------</echo>
	<echo level="info">Resolving Dependencies for ${ant.project.name}...</echo>
	<dependency libraryFolderPathOut="project.library.folder.path" libraryPackagesOut="project.library.packages" libraryManifestFilePathOut="project.library.manifest.file.path" libraryResFolderPathOut="project.library.res.folder.path" libraryBinAidlFolderPathOut="project.library.bin.aidl.folder.path" libraryRFilePathOut="project.library.bin.r.file.path" libraryNativeFolderPathOut="project.library.native.folder.path" jarLibraryPathOut="project.all.jars.path" targetApi="${project.target.apilevel}" renderscriptSupportMode="${renderscript.support.mode}" buildToolsFolder="${android.build.tools.dir}" renderscriptSupportLibsOut="project.rs.support.libs.path" verbose="${verbose}" />
	<!-- compile the libraries if any -->
	<if>
	    <condition>
		<and>
		    <isreference refid="project.library.folder.path" />
		    <not>
			<isset property="dont.do.deps" />
		    </not>
		</and>
	    </condition>
	    <then>
		<!-- figure out which target must be used to build the library projects.
		 If emma is enabled, then use 'instrument' otherwise, use 'debug' -->
		<condition property="project.libraries.target" value="instrument" else="${build.target}">
		    <istrue value="${build.is.instrumented}" />
		</condition>
		<echo level="info">----------</echo>
		<echo level="info">Building Libraries with '${project.libraries.target}'...</echo>
		<!-- no need to build the deps as we have already
		 the full list of libraries -->
		<subant failonerror="true" buildpathref="project.library.folder.path" antfile="build.xml">
		    <target name="nodeps" />
		    <target name="${project.libraries.target}" />
		    <property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />
		</subant>
	    </then>
	</if>
	<!-- compile the main project if this is a test project -->
	<if condition="${project.is.test}">
	    <then>
		<!-- figure out which target must be used to build the tested project.
		 If emma is enabled, then use 'instrument' otherwise, use 'debug' -->
		<condition property="tested.project.target" value="instrument" else="debug">
		    <isset property="emma.enabled" />
		</condition>
		<echo level="info">----------</echo>
		<echo level="info">Building tested project at ${tested.project.absolute.dir} with '${tested.project.target}'...</echo>
		<subant target="${tested.project.target}" failonerror="true">
		    <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />
		</subant>
		<!-- get the tested project full classpath to be able to build
		 the test project -->
		<testedprojectclasspath projectLocation="${tested.project.absolute.dir}" projectClassPathOut="tested.project.classpath" />
	    </then>
	    <else>
		<!-- no tested project, make an empty Path object so that javac doesn't
		 complain -->
		<path id="tested.project.classpath" />
	    </else>
	</if>
    </target>
    <!-- empty default pre-build target. Create a similar target in
     your build.xml and it'll be called instead of this one. -->
    <target name="-pre-build" />
    <!-- Code Generation: compile resources (aapt -> R.java), aidl, renderscript -->
    <target name="-code-gen">
	<!-- always merge manifest -->
	<mergemanifest appManifest="${manifest.abs.file}" outManifest="${out.manifest.abs.file}" enabled="${manifestmerger.enabled}">
	    <library refid="project.library.manifest.file.path" />
	</mergemanifest>
	<do-only-if-manifest-hasCode elseText="hasCode = false. Skipping aidl/renderscript/R.java">
	    <echo level="info">Handling aidl files...</echo>
	    <aidl executable="${aidl}" framework="${project.target.framework.aidl}" libraryBinAidlFolderPathRefid="project.library.bin.aidl.folder.path" genFolder="${gen.absolute.dir}" aidlOutFolder="${out.aidl.absolute.dir}">
		<source path="${source.absolute.dir}" />
	    </aidl>
	    <!-- renderscript generates resources so it must be called before aapt -->
	    <echo level="info">----------</echo>
	    <echo level="info">Handling RenderScript files...</echo>
	    <!-- set the rs target prop in case it hasn't been set. -->
	    <property name="renderscript.target" value="${project.minSdkVersion}" />
	    <renderscript buildToolsRoot="${android.build.tools.dir}" genFolder="${gen.absolute.dir}" resFolder="${out.res.absolute.dir}" rsObjFolder="${out.rs.obj.absolute.dir}" libsFolder="${out.rs.libs.absolute.dir}" targetApi="${renderscript.target}" optLevel="${renderscript.opt.level}" supportMode="${renderscript.support.mode}" binFolder="${out.absolute.dir}" buildType="${build.is.packaging.debug}" previousBuildType="${build.last.is.packaging.debug}">
		<source path="${source.absolute.dir}" />
	    </renderscript>
	    <echo level="info">----------</echo>
	    <echo level="info">Handling Resources...</echo>
	    <aapt executable="${aapt}" command="package" verbose="${verbose}" manifest="${out.manifest.abs.file}" originalManifestPackage="${project.app.package}" androidjar="${project.target.android.jar}" rfolder="${gen.absolute.dir}" nonConstantId="${android.library}" libraryResFolderPathRefid="project.library.res.folder.path" libraryPackagesRefid="project.library.packages" libraryRFileRefid="project.library.bin.r.file.path" ignoreAssets="${aapt.ignore.assets}" binFolder="${out.absolute.dir}" proguardFile="${out.absolute.dir}/proguard.txt">
		<res path="${out.res.absolute.dir}" />
		<res path="${resource.absolute.dir}" />
	    </aapt>
	    <echo level="info">----------</echo>
	    <echo level="info">Handling BuildConfig class...</echo>
	    <buildconfig genFolder="${gen.absolute.dir}" package="${project.app.package}" buildType="${build.is.packaging.debug}" previousBuildType="${build.last.is.packaging.debug}" />
	</do-only-if-manifest-hasCode>
    </target>
    <!-- empty default pre-compile target. Create a similar target in
     your build.xml and it'll be called instead of this one. -->
    <target name="-pre-compile" />
    <!-- Compiles this project's .java files into .class files. -->
    <target name="-compile" depends="-pre-build, -build-setup, -code-gen, -pre-compile">
	<do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
	    <!-- merge the project's own classpath and the tested project's classpath -->
	    <path id="project.javac.classpath">
		<path refid="project.all.jars.path" />
		<path refid="tested.project.classpath" />
		<path path="${java.compiler.classpath}" />
		<path refid='s6.classpath' />
	    </path>
	    <javac encoding="${java.encoding}" source="${java.source}" target="${java.target}" debug="true" extdirs="" includeantruntime="false" destdir="${out.classes.absolute.dir}" bootclasspathref="project.target.class.path" verbose="${verbose}" classpathref="project.javac.classpath" fork="${need.javac.fork}">
		<src path="${source.absolute.dir}" />
		<src path="${gen.absolute.dir}" />
		<compilerarg line="${java.compilerargs}" />
	    </javac>
	    <!-- if the project is instrumented, intrument the classes -->
	    <if condition="${build.is.instrumented}">
		<then>
		    <echo level="info">Instrumenting classes from ${out.absolute.dir}/classes...</echo>
		    <!-- build the filter to remove R, Manifest, BuildConfig -->
		    <getemmafilter appPackage="${project.app.package}" libraryPackagesRefId="project.library.packages" filterOut="emma.default.filter" />
		    <!-- define where the .em file is going. This may have been
		     setup already if this is a library -->
		    <property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />
		    <!-- It only instruments class files, not any external libs -->
		    <emma enabled="true">
			<instr verbosity="${verbosity}" mode="overwrite" instrpath="${out.absolute.dir}/classes" outdir="${out.absolute.dir}/classes" metadatafile="${emma.coverage.absolute.file}">
			    <filter excludes="${emma.default.filter}" />
			    <filter value="${emma.filter}" />
			</instr>
		    </emma>
		</then>
	    </if>
	    <!-- if the project is a library then we generate a jar file -->
	    <if condition="${project.is.library}">
		<then>
		    <echo level="info">Creating library output jar file...</echo>
		    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
		    <if>
			<condition>
			    <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
			</condition>
			<then>
			    <echo level="info">Custom jar packaging exclusion: ${android.package.excludes}</echo>
			</then>
		    </if>
		    <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />
		    <jar destfile="${out.library.jar.file}">
			<fileset dir="${out.classes.absolute.dir}" includes="**/*.class" excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/BuildConfig.class" />
			<fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
		    </jar>
		</then>
	    </if>
	</do-only-if-manifest-hasCode>
    </target>
    <!-- empty default post-compile target. Create a similar target in
     your build.xml and it'll be called instead of this one. -->
    <target name="-post-compile" />
    <!-- Obfuscate target
     This is only active in release builds when proguard.config is defined
     in default.properties.

     To replace Proguard with a different obfuscation engine:
     Override the following targets in your build.xml, before the call to <setup>
     -release-obfuscation-check
     Check whether obfuscation should happen, and put the result in a property.
     -debug-obfuscation-check
     Obfuscation should not happen. Set the same property to false.
     -obfuscate
     check if the property set in -debug/release-obfuscation-check is set to true.
     If true:
     Perform obfuscation
     Set property out.dex.input.absolute.dir to be the output of the obfuscation
     -->
    <target name="-obfuscate">
	<if condition="${proguard.enabled}">
	    <then>
		<property name="obfuscate.absolute.dir" location="${out.absolute.dir}/proguard" />
		<property name="preobfuscate.jar.file" value="${obfuscate.absolute.dir}/original.jar" />
		<property name="obfuscated.jar.file" value="${obfuscate.absolute.dir}/obfuscated.jar" />
		<!-- input for dex will be proguard's output -->
		<property name="out.dex.input.absolute.dir" value="${obfuscated.jar.file}" />
		<!-- Add Proguard Tasks -->
		<property name="proguard.jar" location="${android.tools.dir}/proguard/lib/proguard.jar" />
		<taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.jar}" />
		<!-- Set the android classpath Path object into a single property. It'll be
		 all the jar files separated by a platform path-separator.
		 Each path must be quoted if it contains spaces.
		 -->
		<pathconvert property="project.target.classpath.value" refid="project.target.class.path">
		    <firstmatchmapper>
			<regexpmapper from="^([^ ]*)( .*)$$" to="&quot;\1\2&quot;" />
			<identitymapper />
		    </firstmatchmapper>
		</pathconvert>
		<!-- Build a path object with all the jar files that must be obfuscated.
		 This include the project compiled source code and any 3rd party jar
		 files. -->
		<path id="project.all.classes.path">
		    <pathelement location="${preobfuscate.jar.file}" />
		    <path refid="project.all.jars.path" />
		</path>
		<!-- Set the project jar files Path object into a single property. It'll be
		 all the jar files separated by a platform path-separator.
		 Each path must be quoted if it contains spaces.
		 -->
		<pathconvert property="project.all.classes.value" refid="project.all.classes.path">
		    <firstmatchmapper>
			<regexpmapper from="^([^ ]*)( .*)$$" to="&quot;\1\2&quot;" />
			<identitymapper />
		    </firstmatchmapper>
		</pathconvert>
		<!-- Turn the path property ${proguard.config} from an A:B:C property
		 into a series of includes: -include A -include B -include C
		 suitable for processing by the ProGuard task. Note - this does
		 not include the leading '-include "' or the closing '"'; those
		 are added under the <proguard> call below.
		 -->
		<path id="proguard.configpath">
		    <pathelement path="${proguard.config}" />
		</path>
		<pathconvert pathsep="&quot; -include &quot;" property="proguard.configcmd" refid="proguard.configpath" />
		<mkdir dir="${obfuscate.absolute.dir}" />
		<delete file="${preobfuscate.jar.file}" />
		<delete file="${obfuscated.jar.file}" />
		<jar basedir="${out.classes.absolute.dir}" destfile="${preobfuscate.jar.file}" />
		<proguard>-include	"${proguard.configcmd}"
		    -include	  "${out.absolute.dir}/proguard.txt"
		    -injars	  ${project.all.classes.value}
		    -outjars	  "${obfuscated.jar.file}"
		    -libraryjars  ${project.target.classpath.value}
		    -dump	  "${obfuscate.absolute.dir}/dump.txt"
		    -printseeds   "${obfuscate.absolute.dir}/seeds.txt"
		    -printusage   "${obfuscate.absolute.dir}/usage.txt"
		    -printmapping "${obfuscate.absolute.dir}/mapping.txt"</proguard>
	    </then>
	</if>
    </target>
    <!-- Converts this project's .class files into .dex files -->
    <target name="-dex" depends="-compile, -post-compile, -obfuscate">
	<do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
	    <!-- only convert to dalvik bytecode is *not* a library -->
	    <do-only-if-not-library elseText="Library project: do not convert bytecode...">
		<!-- special case for instrumented builds: need to use no-locals and need
		 to pass in the emma jar. -->
		<if condition="${build.is.instrumented}">
		    <then>
			<dex-helper nolocals="true">
			    <external-libs>
				<fileset file="${emma.dir}/emma_device.jar" />
			    </external-libs>
			</dex-helper>
		    </then>
		    <else>
			<dex-helper />
		    </else>
		</if>
	    </do-only-if-not-library>
	</do-only-if-manifest-hasCode>
    </target>
    <!-- Updates the pre-processed PNG cache -->
    <target name="-crunch">
	<exec executable="${aapt}" taskName="crunch">
	    <arg value="crunch" />
	    <arg value="-v" />
	    <arg value="-S" />
	    <arg path="${resource.absolute.dir}" />
	    <arg value="-C" />
	    <arg path="${out.res.absolute.dir}" />
	</exec>
    </target>
    <!-- Puts the project's resources into the output package file
     This actually can create multiple resource package in case
     Some custom apk with specific configuration have been
     declared in default.properties.
     -->
    <target name="-package-resources" depends="-crunch">
	<!-- only package resources if *not* a library project -->
	<do-only-if-not-library elseText="Library project: do not package resources...">
	    <aapt executable="${aapt}" command="package" versioncode="${version.code}" versionname="${version.name}" debug="${build.is.packaging.debug}" manifest="${out.manifest.abs.file}" assets="${asset.absolute.dir}" androidjar="${project.target.android.jar}" apkfolder="${out.absolute.dir}" nocrunch="${build.packaging.nocrunch}" resourcefilename="${resource.package.file.name}" resourcefilter="${aapt.resource.filter}" libraryResFolderPathRefid="project.library.res.folder.path" libraryPackagesRefid="project.library.packages" libraryRFileRefid="project.library.bin.r.file.path" previousBuildType="${build.last.target}" buildType="${build.target}" ignoreAssets="${aapt.ignore.assets}">
		<res path="${out.res.absolute.dir}" />
		<res path="${resource.absolute.dir}" />
		<!-- <nocompress /> forces no compression on any files in assets or res/raw -->
		<!-- <nocompress extension="xml" /> forces no compression on specific file extensions in assets and res/raw -->
	    </aapt>
	</do-only-if-not-library>
    </target>
    <!-- Packages the application. -->
    <target name="-package" depends="-dex, -package-resources">
	<!-- only package apk if *not* a library project -->
	<do-only-if-not-library elseText="Library project: do not package apk...">
	    <if condition="${build.is.instrumented}">
		<then>
		    <package-helper>
			<extra-jars>
			    <!-- Injected from external file -->
			    <jarfile path="${emma.dir}/emma_device.jar" />
			</extra-jars>
		    </package-helper>
		</then>
		<else>
		    <package-helper />
		</else>
	    </if>
	</do-only-if-not-library>
    </target>
    <target name="-post-package" />
    <target name="-post-build" />
    <target name="-set-mode-check">
	<fail if="build.is.mode.set" message="Cannot run two different modes at the same time. If you are running more than one debug/release/instrument type targets, call them from different Ant calls." />
    </target>
    <!-- ******************************************************* -->
    <!-- **************** Debug specific targets *************** -->
    <!-- ******************************************************* -->
    <target name="-set-debug-files" depends="-set-mode-check">
	<property name="out.packaged.file" location="${out.absolute.dir}/${ant.project.name}-debug-unaligned.apk" />
	<property name="out.final.file" location="${out.absolute.dir}/${ant.project.name}-debug.apk" />
	<property name="build.is.mode.set" value="true" />
    </target>
    <target name="-set-debug-mode" depends="-setup">
	<!-- record the current build target -->
	<property name="build.target" value="debug" />
	<if>
	    <condition>
		<and>
		    <istrue value="${project.is.testapp}" />
		    <istrue value="${emma.enabled}" />
		</and>
	    </condition>
	    <then>
		<property name="build.is.instrumented" value="true" />
	    </then>
	    <else>
		<property name="build.is.instrumented" value="false" />
	    </else>
	</if>
	<!-- whether the build is a debug build. always set. -->
	<property name="build.is.packaging.debug" value="true" />
	<!-- signing mode: debug -->
	<property name="build.is.signing.debug" value="true" />
	<!-- Renderscript optimization level: none -->
	<property name="renderscript.opt.level" value="${renderscript.debug.opt.level}" />
    </target>
    <target name="-debug-obfuscation-check">
	<!-- proguard is never enabled in debug mode -->
	<property name="proguard.enabled" value="false" />
    </target>
    <!-- Builds debug output package -->
    <target name="-do-debug" depends="-set-debug-mode, -debug-obfuscation-check, -package, -post-package">
	<!-- only create apk if *not* a library project -->
	<do-only-if-not-library elseText="Library project: do not create apk...">
	    <sequential>
		<zipalign-helper in.package="${out.packaged.file}" out.package="${out.final.file}" />
		<echo level="info">Debug Package: ${out.final.file}</echo>
	    </sequential>
	</do-only-if-not-library>
	<record-build-info />
    </target>
    <!-- Builds debug output package -->
    <target name="debug" depends="-set-debug-files, -do-debug, -post-build" description="Builds the application and signs it with a debug key." />
    <!-- ******************************************************* -->
    <!-- ********** Install/uninstall specific targets ********* -->
    <!-- ******************************************************* -->
    <target name="install" description="Installs the newly build package. Must be used in conjunction with a build target                      (debug/release/instrument). If the application was previously installed, the application                      is reinstalled if the signature matches.">
	<!-- only do install if *not* a library project -->
	<do-only-if-not-library elseText="Library project: nothing to install!">
	    <if>
		<condition>
		    <isset property="out.final.file" />
		</condition>
		<then>
		    <if>
			<condition>
			    <resourceexists>
				<file file="${out.final.file}" />
			    </resourceexists>
			</condition>
			<then>
			    <echo level="info">Installing ${out.final.file} onto default emulator or device...</echo>
			    <exec executable="${adb}" failonerror="true">
				<arg line="${adb.device.arg}" />
				<arg value="install" />
				<arg value="-r" />
				<arg path="${out.final.file}" />
			    </exec>
			    <!-- now install the tested project if applicable -->
			    <!-- can't use project.is.test since the setup target might not have run -->
			    <if>
				<condition>
				    <and>
					<isset property="tested.project.dir" />
					<not>
					    <isset property="dont.do.deps" />
					</not>
				    </and>
				</condition>
				<then>
				    <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
				    <!-- figure out which tested package to install based on emma.enabled -->
				    <condition property="tested.project.install.target" value="installi" else="installd">
					<isset property="emma.enabled" />
				    </condition>
				    <subant target="${tested.project.install.target}" failonerror="true">
					<fileset dir="${tested.project.absolute.dir}" includes="build.xml" />
				    </subant>
				</then>
			    </if>
			</then>
			<else>
			    <fail message="File ${out.final.file} does not exist." />
			</else>
		    </if>
		</then>
		<else>
		    <echo>Install file not specified.</echo>
		    <echo />
		    <echo>'ant install' now requires the build target to be specified as well.</echo>
		    <echo />
		    <echo />
		    <echo>ant debug install</echo>
		    <echo>ant release install</echo>
		    <echo>ant instrument install</echo>
		    <echo>This will build the given package and install it.</echo>
		    <echo />
		    <echo>Alternatively, you can use</echo>
		    <echo>ant installd</echo>
		    <echo>ant installr</echo>
		    <echo>ant installi</echo>
		    <echo>ant installt</echo>
		    <echo>to only install an existing package (this will not rebuild the package.)</echo>
		    <fail />
		</else>
	    </if>
	</do-only-if-not-library>
    </target>
    <target name="installd" depends="-set-debug-files, install" description="Installs (only) the debug package." />
    <!-- Uninstalls the package from the default emulator/device -->
    <target name="uninstall" depends="-setup" description="Uninstalls the application from a running emulator or device.">
	<if>
	    <condition>
		<isset property="project.app.package" />
	    </condition>
	    <then>
		<uninstall-helper app.package="${project.app.package}" />
	    </then>
	    <else>
		<fail message="Could not find application package in manifest. Cannot run 'adb uninstall'." />
	    </else>
	</if>
	<!-- Now uninstall the tested project, if applicable -->
	<if>
	    <condition>
		<and>
		    <istrue value="${project.is.test}" />
		    <not>
			<isset property="dont.do.deps" />
		    </not>
		</and>
	    </condition>
	    <then>
		<property name="tested.project.absolute.dir" location="${tested.project.dir}" />
		<!-- Application package of the tested project extracted from its manifest file -->
		<xpath input="${tested.project.absolute.dir}/AndroidManifest.xml" expression="/manifest/@package" output="tested.project.app.package" />
		<if>
		    <condition>
			<isset property="tested.project.app.package" />
		    </condition>
		    <then>
			<uninstall-helper app.package="${tested.project.app.package}" />
		    </then>
		    <else>
			<fail message="Could not find tested application package in manifest. Cannot run 'adb uninstall'." />
		    </else>
		</if>
	    </then>
	</if>
    </target>
    <!-- ******************************************************* -->
    <!-- ******************** Launch the app ******************* -->
    <!-- ******************************************************* -->
    <target name="launch">
	<exec executable="adb">
	    <arg value="shell"/>
	    <arg value="am"/>
	    <arg value="start"/>
	    <arg value="-a"/>
	    <arg value="$(MAINACTIVITY)"/>
	    <arg value="-n"/>
	    <arg value="$(LAUNCHACTIVITY)"/>
	</exec>
    </target>

    <!-- ******************************************************* -->
    <!-- ************************* Help ************************ -->
    <!-- ******************************************************* -->
    <target name="help">
	<echo>Android Ant Build. Available targets:</echo>
	<echo>help:	 Displays this help.</echo>
	<echo>clean:	 Removes output files created by other targets.</echo>
	<echo>debug:	 Builds the application and signs it with a debug key.</echo>
	<echo>installd:  Installs (only) the debug package.</echo>
	<echo>uninstall: Uninstalls the application from a running emulator or device.</echo>
	<echo>launch: Starts the application on a running emulator or device.</echo>
    </target>

    <!-- ******************************************************* -->
    <!-- ************************* S6 Extensions *************** -->
    <!-- ******************************************************* -->
   <target name='s6setupcontext'>
      $(CONTEXT_ANT)
   </target>

   <target name='run' depends='s6setupcontext,debug'>
      <java classname="$(PACKAGEDOT)$(CLASS)" fork='true'>
	 <classpath>
	    <pathelement location="$(BIN)" />
	    <path refid='s6.classpath' />
	 </classpath>
      </java>
   </target>

   <target name="testandroid" depends="s6setupcontext,debug">
      <junit printsummary='true' haltonerror='true' fork='true' >
	 <assertions><enable/></assertions>
	 <formatter type="xml" usefile="true" />
	 <test name="$(PACKAGEDOT)$(CLASS)" outfile="test.out" />
	 <classpath>
	    <pathelement location="$(BIN)" />
	    <path refid='s6.classpath' />
	 </classpath>
      </junit>
   </target>

   <target name="jar">
      <jar destfile='$(UIJAR)'>
	 <manifest>
	    <attribute name='Main-Class' value='$(PACKAGEDOT)$(CLASS)' />
	 </manifest>
	 <fileset dir='$(S6CLS)' includes='**/runner/Runner*.class' />
	 <fileset dir='$(BIN)' includes='**/*.class' />
	 <zipfileset src='$(JUNITCP)' excludes='META-INF/*' />
      </jar>
   </target>



</project>
