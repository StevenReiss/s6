/********************************************************************************/
/*                                                                              */
/*              GoogleSearcher.java                                             */
/*                                                                              */
/*        Searches Google Custom Search Engines                                 */
/*                                                                              */
/********************************************************************************/
/*      Copyright 2005 Brown University -- Steven P. Reiss                    */
/*********************************************************************************
 *  Copyright 2005, Brown University, Providence, RI.                            *
 *                                                                               *
 *                        All Rights Reserved                                    *
 *                                                                               *
 *  Permission to use, copy, modify, and distribute this software and its        *
 *  documentation for any purpose other than its incorporation into a            *
 *  commercial product is hereby granted without fee, provided that the          *
 *  above copyright notice appear in all copies and that both that               *
 *  copyright notice and this permission notice appear in supporting             *
 *  documentation, and that the name of Brown University not be used in          *
 *  advertising or publicity pertaining to distribution of the software          *
 *  without specific, written prior permission.                                  *
 *                                                                               *
 *  BROWN UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS                *
 *  SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND            *
 *  FITNESS FOR ANY PARTICULAR PURPOSE.  IN NO EVENT SHALL BROWN UNIVERSITY      *
 *  BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY          *
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,              *
 *  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS               *
 *  ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE          *
 *  OF THIS SOFTWARE.                                                            *
 *                                                                               *
 ********************************************************************************/

/* RCS: $Header: [insert eventual file name],v 2.0 2013-08-19 16:26:07 zolstein Exp $ */

/*********************************************************************************
 *
 * $Log: java,v $
 * 
 * Revision 1.0  2013-08-30 11:11:20  zolstein
 * Original version 
 *
 *
 ********************************************************************************/


package search;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;


public class GoogleSearcher {

/********************************************************************************/
/*                                                                              */
/* Private Storage                                                              */
/*                                                                              */
/********************************************************************************/


// Current default is Custom Search Engine "All Sites"
// Searches all sites, may be slightly different than regular Google searchs
// Owned by user SteveReissStudent, password "brown2013"

private static String DEFAULT_API_KEY      = "AIzaSyBIzSSGjuHFOK0qec1Qt1-TJrnM-GMlxFI";
private static String DEFAULT_ENGINE_ID    = "017842604113442278703:gmfsdi7xocg";
private static int    DEFAULT_RESULT_COUNT = 10;

private String        api_key;
private String        engine_id;
private int           result_count;

/********************************************************************************/
/*                                                                              */
/* Constructors                                                                 */
/*                                                                              */
/********************************************************************************/


public GoogleSearcher(String apiKey,String engineId,int resultCount)
{
   api_key = apiKey;
   engine_id = engineId;
   result_count = resultCount;
}

public GoogleSearcher(String apiKey,String engineId)
{
   this(apiKey,engineId,DEFAULT_RESULT_COUNT);
}

public GoogleSearcher(int resultCount)
{
   this(DEFAULT_API_KEY,DEFAULT_ENGINE_ID,resultCount);
}

public GoogleSearcher()
{
   this(DEFAULT_API_KEY,DEFAULT_ENGINE_ID,DEFAULT_RESULT_COUNT);
}

/********************************************************************************/
/*                                                                              */
/* Search                                                                       */
/*                                                                              */
/********************************************************************************/

/* 
 * Contains code adapted from StackOverflow:
 * http://stackoverflow.com/questions/11319705/google-custom-search-api
 */
public List<String> search(String search,int numRslts)
{
   long time = System.currentTimeMillis();
   List<String> toReturn = new ArrayList<String>(numRslts);
   String qry = generateQuery(search);

   int numQrys = numRslts % result_count == 0 ? numRslts / result_count : numRslts
            / result_count + 1;
   for (int i = 0; i < numQrys; i++) {
      StringBuilder urlStringBuilder = new StringBuilder(
               "https://www.googleapis.com/customsearch/v1?key=" + api_key + "&cx="
                        + engine_id + "&q=" + qry + "&alt=json&num=" + result_count);
      if (i != 0) {
         urlStringBuilder.append("&start=" + (i * result_count));
      }
      else {
         System.out.println(urlStringBuilder.toString());
      }
      try {
         URL url = new URL(urlStringBuilder.toString());
         HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
         urlConnection.setRequestMethod("GET");
         urlConnection.setRequestProperty("Accept", "application/json");
         BufferedReader br = new BufferedReader(new InputStreamReader(
                  (urlConnection.getInputStream())));

         String line;
         while ((line = br.readLine()) != null && toReturn.size() < numRslts) {
            if (line.contains("\"link\": \"")) {
               String result = line.substring(line.indexOf("\"link\": \"")
                        + ("\"link\": \"").length(), line.indexOf("\","));
               toReturn.add(result);
            }
         }
         urlConnection.disconnect();
      }
      catch (IOException e) {
         System.out.println("An error occurred.");
         e.printStackTrace();
         break;
      }
   }

   System.out.println(System.currentTimeMillis() - time);

   return toReturn;
}

public List<String> threadedSearch(String search,int numRslts)
{
   long time = System.currentTimeMillis();
   List<String> toReturn = new ArrayList<String>(numRslts);

   String urlString = new StringBuilder("https://www.googleapis.com/customsearch/v1?key="
            + api_key + "&cx=" + engine_id + "&q=" + generateQuery(search)
            + "&alt=json&num=" + result_count).toString();

   int numQrys = numRslts % result_count == 0 ? numRslts / result_count : numRslts
            / result_count + 1;
   List<Future<List<String>>> futures = new ArrayList<Future<List<String>>>(numQrys);
   ExecutorService executor = new ForkJoinPool();

   for (int i = 0; i < numQrys; i++) {
      String numberedUrl = urlString;
      if (i > 0) {
         numberedUrl = numberedUrl + "&start=" + (i * result_count);
      }
      futures.add(executor.submit(new Querier(numberedUrl)));
   }

   for (Future<List<String>> f : futures) {
      try {
         toReturn.addAll(f.get());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
   }

   System.out.println(System.currentTimeMillis() - time);
   return toReturn;
}

public static String generateQuery(String search)
{
   StringBuilder sb = new StringBuilder();
   for (char c : search.toCharArray()) {
      if (c == ' ') {
         sb.append('+');
      } else {
         sb.append('%');
         sb.append(Integer.toHexString(c));
      }
   }
   return sb.toString();
}

private static class Querier implements Callable<List<String>> {

private String query_string;

public Querier(String query)
{
   query_string = query;
}

@Override public List<String> call()
{
   List<String> toReturn = new ArrayList<String>();
   try {
      URL url = new URL(query_string);
      HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
      urlConnection.setRequestMethod("GET");
      urlConnection.setRequestProperty("Accept", "application/json");
      BufferedReader br = new BufferedReader(new InputStreamReader(
               (urlConnection.getInputStream())));

      String line;
      while ((line = br.readLine()) != null) {
         if (line.contains("\"link\": \"")) {
            String result = line.substring(line.indexOf("\"link\": \"")
                     + ("\"link\": \"").length(), line.indexOf("\","));
            toReturn.add(result);
         }
      }
      urlConnection.disconnect();
   }
   catch (IOException e) {
      e.printStackTrace();
   }
   return toReturn;
}
}

}