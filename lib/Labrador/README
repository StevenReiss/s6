things seem to run smoothly under my emulated version of your enviornment. i checked s6 out from cvs to a folder called /u/jtwebb/bloom/Search/cvscheckout (/pro/bloom_smr/jtwebb/Search/cvscheckout). my modifications to the checkout are as follows: i have put a folder in lib called Labrador (cvscheckout/pro/s6/lib/Labrador). that folder contains a folder called lib (cvscheckout/pro/s6/lib/Labrador/lib) which contains all thirty one of labrador's dependencies. Labrador contains another folder called resources (cvscheckout/pro/s6/lib/Labrador/resources) which contains all the dictionary, stopwords, and mapping files. Labrador (cvscheckout/pro/s6/lib/Labrador) itself contains labrador.jar, several application contexts, and two properties files. i have also put ten shell scripts in the bin folder (cvscheckout/pro/s6/bin) to facilitate use of the software.

the application contexts and properties files tell the program how to run. they are actually pretty neat. i don't recommend messing with them too much, but they can be used to swap out different implementations, databases, etc. the easiest way to do this is to comment out a line that contains a default alias and uncomment one of the lines above or below it that specifies a different default. to change the database edit applicationContext-dataSources.xml. change the user name, password, and database connection url etc. please note: postgresql is using ident authentication so you may not need to change anything but if you get any strange database errors assert that everything is correct there.

a description of the shell scripts (warning: these are the first shell scripts i have ever written. i have some ideas for nifty features to add to them later today.):
labradormanagercmd.sh    -    this script will tell the labrador manager to do anything you like. all arguments for the application must be in quotes. for example: ./labradormanagercmd.sh "-i -o -s token -r 10" will: synchronize the index, optimize the index, and then return a maximum of ten results from a search for token. help: ./labradormanagercmd.sh -h will show usage text for the labrador manager application.
labradorserver.sh    -    this script will tell the labrador server to do anything you like. all arguments for the application must be in quotes. for example: ./labradorserver.sh "-a '0 22 15 * * ? *' -l" will start the server and tell it to synchronize at 3:22pm everyday and then ask for the server's schedule. help: ./labradorserver.sh -h will show usage text for the labrador server application.
labradorinitenv.sh    -    this script sets up several environment variables used by labrador. make sure to update this script when/if you move things around. this script is used by each of the other scripts to know where various things are.
labradoruninitenv.sh    -    this script takes down all of the environment variables set by labradorinitenv.sh. like labradorinitenv.sh this script is used by each of the other scripts as the last thing they do before exiting.
labradorreset.sh    -    this script will blank everything in the database. it completely resets the system. it also has a secondary use. if you decide to change databases you must first run reset to ready the database for use by the software.
labradorstart.sh    -    this script starts the server and schedules synchronization for 1am. it then displays the servers schedule to make sure everything went alright. please note: the server only performs automated synchronization. it is not used for or by anything else. all other scripts (except labradorstop.sh) will function perfectly without the server running. however, if you want to automate synchronization the server needs to be running.
labradorstop.sh    -    this script will stop the server if it is running. if the server is not running it will fail silently.
labradorsetup.sh    -    this script will tell labrador to monitor all of the files that i think you were having beagle monitor (based on the beagle scripts). this script will take a longish time to run. the software is optimized for synchronization. the notion being that you will only add once, but synchronize daily. this script can be run at any time or multiple times (double insertions are detected and ignored); however if no files are monitored there is nothing to synchronize and nothing to search. thus i recommend running it early.
labradorsynchronize.sh    -    tells labrador to synchronize immediately.
labradorquery.sh    -    this script will run queries against the database. as with labradormanagercmd.sh and labradorserver.sh you must put all the keywords in quotes. for example: ./labradorquery.sh "roman AND numeral" would search for they keyword roman and the keyword numeral (a single search for files containing both keywords).

lastly documentation for the core program is sparse at best, exception handling and propagation is almost as flaky as the logging, and while the software is built with industry grade tools it has not been industry grade tested. i will try to work on that sort of stuff now. please report any errors asap.
